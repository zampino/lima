// Generated by CoffeeScript 1.4.0
(function() {

  Lima.Turtle = (function() {

    function Turtle(processing, options) {
      this.p = processing;
      this.position = new Lima.Position({
        p: this.p,
        x: options.x,
        y: options.y,
        angle: options.angle
      });
      Lima.Position.step = options.step || 30;
      this.queue = [];
    }

    Turtle.prototype.forward = function() {
      var trace;
      trace = this.position.trace();
      console.log("ffw", trace);
      return this.p.line.apply(this, trace);
    };

    Turtle.prototype.left = function(angle) {
      console.log("left");
      return this.position.rotate(angle);
    };

    Turtle.prototype.right = function(angle) {
      return this.position.rotate(-angle);
    };

    Turtle.prototype.push = function() {
      var markPos;
      markPos = new Lima.Position(this.position);
      this.queue.push(markPos);
      return console.log("push", this.queue);
    };

    Turtle.prototype.pop = function() {
      var oldPos;
      oldPos = this.queue.pop();
      console.log("pop", this.position, oldPos);
      return this.position = oldPos;
    };

    return Turtle;

  })();

  Lima.Position = (function() {

    function Position() {
      _.extend(this, this.parseArgs(arguments[0]));
      this.step = 10;
    }

    Position.prototype.parseArgs = function(args) {
      return args;
    };

    Position.prototype.rotate = function(angle) {
      return this.angle += angle;
    };

    Position.prototype.stepOn = function(steps) {
      if (steps == null) {
        steps = 1;
      }
      this.x += steps * this.step * Math.cos(this.p.radians(this.angle));
      this.y += steps * this.step * Math.sin(this.p.radians(this.angle));
      return this;
    };

    Position.prototype.add = function(args) {};

    Position.prototype.trace = function() {
      var x, y;
      x = this.x;
      y = this.y;
      this.stepOn();
      return [x, y, this.x, this.y];
    };

    return Position;

  })();

}).call(this);
