// Generated by CoffeeScript 1.4.0
(function() {

  Lima.LSys = (function() {

    function LSys(options) {
      _.extend(this, options);
      this.sentence = this.axiom;
    }

    LSys.prototype.iterate = function(times) {
      this.buildSentence(times);
      this.length = this.sentence.length;
      return console.log(this.sentence);
    };

    LSys.prototype.draw = function(index, turtle) {
      var a, actions, angle, arg, method, sym, _i, _len, _ref, _results;
      sym = this.sentence[index];
      actions = this.actions[sym] || [];
      _results = [];
      for (_i = 0, _len = actions.length; _i < _len; _i++) {
        a = actions[_i];
        _ref = a.split("-"), method = _ref[0], arg = _ref[1];
        angle = arg ? parseInt(arg) : 0;
        _results.push(turtle[method].call(turtle, angle));
      }
      return _results;
    };

    LSys.prototype.buildSentence = function(times) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= times ? _i <= times : _i >= times; i = 1 <= times ? ++_i : --_i) {
        _results.push(this.expand());
      }
      return _results;
    };

    LSys.prototype.expand = function() {
      var letter;
      return this.sentence = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.sentence;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          letter = _ref[_i];
          _results.push(this.map(letter));
        }
        return _results;
      }).call(this)).join("");
    };

    LSys.prototype.map = function(letter) {
      var exp;
      if (!(exp = this.rules[letter])) {
        return letter;
      }
      return exp;
    };

    return LSys;

  })();

}).call(this);
